syntax = "proto3";
package raftpb;
option go_package = "github.com/mkuklik/raft/raftpb";

service Raft {
  rpc Register(RegisterRequest) returns (RegisterReply) {}
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesReply) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteReply) {}
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotReply) {}
}

message RegisterRequest {
  uint32 id = 1;
  string addr = 2;
}

message RegisterReply {
  bool success = 1;
  uint32 leaderID = 2;
  uint32 leaderAddr = 3;
}

message LogEntry {
  uint32 term = 1;
  uint32 index = 2;
  bytes payload = 3;
}

// AppendEntries 
// Invoked by leader to replicate log entries (§5.3); also used as heartbeat (§5.2).
message AppendEntriesRequest {

  uint32 term = 1; // leader’s term
  uint32 leaderId = 2; // so follower can redirect clients
  uint32 prevLogIndex = 3; // index of log entry immediately preceding new ones
  uint32 prevLogTerm = 4; // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat; may send more than one for efficiency) 
  uint32 leaderCommit = 6; // leader’s commitIndex
}


message AppendEntriesReply {
 uint32 term = 1; // currentTerm, for leader to update itself
 bool success = 2;  // true if follower contained entry matching prevLogIndex and prevLogTerm
}


// RequestVote
// Invoked by candidates to gather votes (§5.2).
message RequestVoteRequest {
  uint32 term = 1; // candidate’s term
  uint32 candidateId = 2; // candidate requesting vote
  uint32 lastLogIndex = 3; // index of candidate’s last log entry (§5.4) 
  uint32 lastLogTerm = 4; // term of candidate’s last log entry (§5.4)
}


message RequestVoteReply {
  uint32 term = 1; // currentTerm, for candidate to update itself 
  bool voteGranted = 2; // true means candidate received vote
}

// InstallSnapshot 
message InstallSnapshotRequest {
  uint32 term = 1; // leader’s term
  uint32 leaderId = 2; // so follower can redirect clients
  uint32 lastIncludedIndex = 3; // the snapshot replaces all entries up through and including this index
  uint32 lastIncludedTerm =4; // term of lastIncludedIndex
  uint64 offset = 5;// byte offset where chunk is positioned in the snapshot file
  bytes data=6; // raw bytes of the snapshot chunk, starting at offset
  bool done=7; // true if this is the last chunk
}

message InstallSnapshotReply {
  uint32 term = 1; // currentTerm, for leader to update itself
}